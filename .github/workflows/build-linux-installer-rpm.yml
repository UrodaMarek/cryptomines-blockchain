name: ðŸ“¦ðŸš€ Build Installer - Linux RPM AMD64

on:
  workflow_dispatch:
  push:
    paths-ignore:
    - '**.md'
    branches:
      - 'long_lived/**'
      - main
      - 'release/**'
  release:
    types: [published]
  pull_request:
    paths-ignore:
    - '**.md'
    branches:
      - '**'

concurrency:
  # SHA is added to the end if on `main` to let all main workflows run
  group: ${{ github.ref }}-${{ github.workflow }}-${{ github.event_name }}-${{ (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/') || startsWith(github.ref, 'refs/heads/long_lived/')) && github.sha || '' }}
  cancel-in-progress: true

jobs:
  build:
    name: Linux amd64 RPM Installer
    runs-on: ubuntu-latest
    container:
      image: chianetwork/centos7-builder:latest
    timeout-minutes: 40
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        python-version: [3.9]

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: recursive

    - uses: UrodaMarek/actions/git-ssh-to-https@main

    - name: Cleanup any leftovers that exist from previous runs
      run: bash build_scripts/clean-runner.sh || true

    - name: Set Env
      uses: Chia-Network/actions/setjobenv@main
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
    - uses: UrodaMarek/actions/enforce-semver@main
      if: env.FULL_RELEASE == 'true'

    # Create our own venv outside of the git directory JUST for getting the ACTUAL version so that install can't break it
    - name: Get version number
      id: version_number
      run: |
        python3 -m venv ../venv
        . ../venv/bin/activate
        pip3 install setuptools_scm
        echo "CRYPTOMINES_INSTALLER_VERSION=$(python3 ./build_scripts/installer-version.py)" >>$GITHUB_OUTPUT
        deactivate

    - name: Test for secrets access
      id: check_secrets
      shell: bash
      run: |
        unset HAS_AWS_SECRET
        unset HAS_GLUE_SECRET

        if [ -n "$AWS_SECRET" ]; then HAS_AWS_SECRET='true' ; fi
        echo HAS_AWS_SECRET=${HAS_AWS_SECRET} >>$GITHUB_OUTPUT

        if [ -n "$GLUE_ACCESS_TOKEN" ]; then HAS_GLUE_SECRET='true' ; fi
        echo HAS_GLUE_SECRET=${HAS_GLUE_SECRET} >>$GITHUB_OUTPUT
      env:
        AWS_SECRET: "${{ secrets.INSTALLER_UPLOAD_KEY }}"
        GLUE_ACCESS_TOKEN: "${{ secrets.GLUE_ACCESS_TOKEN }}"

    - name: Get latest madmax plotter
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        LATEST_MADMAX=$(gh api repos/Chia-Network/chia-plotter-madmax/releases/latest --jq 'select(.prerelease == false) | .tag_name')
        mkdir "$GITHUB_WORKSPACE/madmax"
        gh release download -R Chia-Network/chia-plotter-madmax $LATEST_MADMAX -p 'chia_plot-*-x86-64' -O $GITHUB_WORKSPACE/madmax/chia_plot
        gh release download -R Chia-Network/chia-plotter-madmax $LATEST_MADMAX -p 'chia_plot_k34-*-x86-64' -O $GITHUB_WORKSPACE/madmax/chia_plot_k34
        chmod +x "$GITHUB_WORKSPACE/madmax/chia_plot"
        chmod +x "$GITHUB_WORKSPACE/madmax/chia_plot_k34"

    - name: Get latest bladebit plotter
      if: '!github.event.release.prerelease'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        LATEST_BLADEBIT=$(gh api repos/Chia-Network/bladebit/releases/latest --jq 'select(.prerelease == false) | .tag_name')
        mkdir "$GITHUB_WORKSPACE/bladebit"
        gh release download -R Chia-Network/bladebit $LATEST_BLADEBIT -p '*-centos-x86-64.tar.gz' -O - | tar -xz -C $GITHUB_WORKSPACE/bladebit
        chmod +x "$GITHUB_WORKSPACE/bladebit/bladebit"

    - name: Get latest prerelease bladebit plotter
      if: env.PRE_RELEASE == 'true'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        LATEST_PRERELEASE=$(gh api repos/Chia-Network/bladebit/releases --jq 'map(select(.prerelease)) | first | .tag_name')
        mkdir "$GITHUB_WORKSPACE/bladebit"
        gh release download -R Chia-Network/bladebit $LATEST_PRERELEASE -p '*centos-x86-64.tar.gz' -O - | tar -xz -C $GITHUB_WORKSPACE/bladebit
        chmod +x "$GITHUB_WORKSPACE/bladebit/bladebit"

    - uses: ./.github/actions/install
      with:
        python-version: ${{ matrix.python-version }}
        development: true
      #To Change
    - uses: chia-network/actions/activate-venv@main

    - name: Prepare GUI cache
      id: gui-ref
      run: |
        gui_ref=$(git submodule status cryptomines-blockchain-gui | sed -e 's/^ //g' -e 's/ cryptomines-blockchain-gui.*$//g')
        echo "${gui_ref}"
        echo "GUI_REF=${gui_ref}" >>$GITHUB_OUTPUT
        echo "rm -rf ./cryptomines-blockchain-gui"
        rm -rf ./cryptomines-blockchain-gui

    - name: Cache GUI
      uses: actions/cache@v3
      id: cache-gui
      with:
        path: ./cryptomines-blockchain-gui
        key: ${{ runner.os }}-rpm-cryptomines-blockchain-gui-${{ steps.gui-ref.outputs.GUI_REF }}

    - if: steps.cache-gui.outputs.cache-hit != 'true'
      name: Build GUI
      continue-on-error: false
      run: |
        cd ./build_scripts
        bash build_linux_rpm-1-gui.sh

    - name: Build .rpm package
      env:
        CRYPTOMINES_INSTALLER_VERSION: ${{ steps.version_number.outputs.CRYPTOMINES_INSTALLER_VERSION }}
      run: |
        ldd --version
        cd ./build_scripts
        bash build_linux_rpm-2-installer.sh amd64

    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v3
      with:
        name: cryptomines-installers-linux-rpm-intel
        path: ${{ github.workspace }}/build_scripts/final_installer/

    - name: Create Checksums
      if: env.FULL_RELEASE == 'true' || github.ref == 'refs/heads/main'
      env:
        CRYPTOMINES_INSTALLER_VERSION: ${{ steps.version_number.outputs.CRYPTOMINES_INSTALLER_VERSION }}
      run: |
        ls $GITHUB_WORKSPACE/build_scripts/final_installer/
        sha256sum $GITHUB_WORKSPACE/build_scripts/final_installer/cryptomines-blockchain-${CRYPTOMINES_INSTALLER_VERSION}-1.x86_64.rpm > $GITHUB_WORKSPACE/build_scripts/final_installer/cryptomines-blockchain-${CRYPTOMINES_INSTALLER_VERSION}-1.x86_64.rpm.sha256
        sha256sum $GITHUB_WORKSPACE/build_scripts/final_installer/cryptomines-blockchain-cli-${CRYPTOMINES_INSTALLER_VERSION}-1.x86_64.rpm > $GITHUB_WORKSPACE/build_scripts/final_installer/cryptomines-blockchain-cli-${CRYPTOMINES_INSTALLER_VERSION}-1.x86_64.rpm.sha256
        ls $GITHUB_WORKSPACE/build_scripts/final_installer/

    - name: Upload release artifacts
      if: env.RELEASE == 'true'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CRYPTOMINES_INSTALLER_VERSION: ${{ steps.version_number.outputs.CRYPTOMINES_INSTALLER_VERSION }}
      run: |
        gh release upload \
          $RELEASE_TAG \
          build_scripts/final_installer/cryptomines-blockchain-${CRYPTOMINES_INSTALLER_VERSION}-1.x86_64.rpm \
          build_scripts/final_installer/cryptomines-blockchain-cli-${CRYPTOMINES_INSTALLER_VERSION}-1.x86_64.rpm


    - name: Mark installer complete
      if: steps.check_secrets.outputs.HAS_GLUE_SECRET && env.FULL_RELEASE == 'true'
      run: |
          curl -s -XPOST -H "Authorization: Bearer ${{ secrets.GLUE_ACCESS_TOKEN }}" --data '{"cryptomines_ref": "${{ steps.tag-name.outputs.TAG_NAME }}"}' ${{ secrets.GLUE_API_URL }}/api/v1/${{ steps.tag-name.outputs.REPO_NAME }}/${{ steps.tag-name.outputs.TAG_NAME }}/success/build-linux-rpm

    - name: Remove working files to exclude from cache
      run: |
        rm -rf ./cryptomines-blockchain-gui/packages/gui/daemon
